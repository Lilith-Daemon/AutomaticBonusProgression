using AutomaticBonusProgression.Util;
using BlueprintCore.Blueprints.CustomConfigurators.Classes;
using BlueprintCore.Blueprints.References;
using Kingmaker.Blueprints;
using Kingmaker.Blueprints.Classes;
using Kingmaker.UnitLogic.FactLogic;

namespace AutomaticBonusProgression.Enchantments
{
  internal class Invulnerability
  {
    private static readonly Logging.Logger Logger = Logging.GetLogger(nameof(Invulnerability));

    private const string InvulnerabilityName = "LegendaryArmor.Invulnerability";
    private const string BuffName = "LegendaryArmor.Invulnerability.Buff";
    private const string AbilityName = "LegendaryArmor.Invulnerability.Ability";

    private const string DisplayName = "LegendaryArmor.Invulnerability.Name";
    private const string Description = "LegendaryArmor.Invulnerability.Description";
    private const int EnhancementCost = 3;

    internal static BlueprintFeature Configure()
    {
      Logger.Log($"Configuring Invulnerability");

      var enchantInfo =
        new ArmorEnchantInfo(
          DisplayName,
          Description,
          "",
          EnhancementCost,
          ranks: 3);
      var invulnerabilityFeature =
        EnchantmentTool.AddEnhancementEquivalence(FeatureRefs.ArcaneArmorInvulnerabilityFeature, enchantInfo);

      FeatureConfigurator.For(invulnerabilityFeature).EditComponent<AddDamageResistancePhysical>(c => c.Value = 10);

      return EnchantmentTool.CreateEnchant(
        enchantInfo,
        new BlueprintInfo(BuffName, Guids.InvulnerabilityBuff, invulnerabilityFeature.GetComponent<AddDamageResistancePhysical>()),
        new(AbilityName, Guids.InvulnerabilityAbility),
        new(InvulnerabilityName, Guids.Invulnerability));
    }
  }
}
