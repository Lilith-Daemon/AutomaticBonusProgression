using AutomaticBonusProgression.Components;
using AutomaticBonusProgression.Util;
using BlueprintCore.Blueprints.CustomConfigurators.Classes;
using BlueprintCore.Blueprints.References;
using Kingmaker.Blueprints;
using Kingmaker.Blueprints.Classes;
using Kingmaker.UnitLogic.FactLogic;

namespace AutomaticBonusProgression.Enchantments
{
  internal class Invulnerability
  {
    private static readonly Logging.Logger Logger = Logging.GetLogger(nameof(Invulnerability));

    private const string InvulnerabilityName = "LegendaryArmor.Invulnerability";
    private const string BuffName = "LegendaryArmor.Invulnerability.Buff";
    private const string AbilityName = "LegendaryArmor.Invulnerability.Ability";

    private const string DisplayName = "LegendaryArmor.Invulnerability.Name";
    private const string Description = "LegendaryArmor.Invulnerability.Description";
    private const int EnhancementCost = 3;

    internal static BlueprintFeature Configure()
    {
      Logger.Log($"Configuring Invulnerability");

      var invulnerabilityFeature =
        EnchantmentTool.AddEnhancementEquivalence(
          FeatureRefs.ArcaneArmorInvulnerabilityFeature, EnhancementType.Armor, EnhancementCost);

      FeatureConfigurator.For(invulnerabilityFeature).EditComponent<AddDamageResistancePhysical>(c => c.Value = 10);

      return EnchantmentTool.CreateEnchant(
        buffName: BuffName,
        buffGuid: Guids.InvulnerabilityBuff,
        displayName: DisplayName,
        description: Description,
        //icon: ??,
        type: EnhancementType.Armor,
        enhancementCost: EnhancementCost,
        abilityName: AbilityName,
        abilityGuid: Guids.InvulnerabilityAbility,
        featureName: InvulnerabilityName,
        Guids.Invulnerability,
        featureRanks: EnhancementCost,
        buffComponents: invulnerabilityFeature.GetComponent<AddDamageResistancePhysical>());
    }
  }
}
